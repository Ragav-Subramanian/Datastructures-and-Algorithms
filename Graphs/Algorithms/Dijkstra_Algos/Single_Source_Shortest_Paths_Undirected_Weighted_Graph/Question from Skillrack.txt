The program must accept an NxN adjacency matrix of a weighted graph and the source vertex as the input. 
The graph contains N vertices numbered from 1 to N. 
The program must calculate the shortest path from the source to all the vertices and print the shortest distance and paths as shown in the Example Input/Output section. 
The destination vertices must be sorted in ascending order in the output. 

Note: There is exactly one shortest path available from source to each vertex. 

Boundary Condition(s): 1 <= N <= 1000 

Input Format: 
The first line contains N. 
The next N lines contain N integers each separated by a space. 
The N+1th line contains the source vertex. 

Output Format: 
The first 2*N lines contain the shortest distance and path as shown in the Example Input/Output section. 

Example Input/Output 1: 

Input: 
6
0 0 8 0 8 1 
0 0 8 5 6 9 
8 8 0 6 5 0 
0 5 6 0 0 2 
8 6 5 0 0 4 
1 9 0 2 4 0 
1 

Output: 

Distance from 1 to 1 is 0 
1 
Distance from 1 to 2 is 8 
1->6->4->2 
Distance from 1 to 3 is 8 
1->3 
Distance from 1 to 4 is 3 
1->6->4 
Distance from 1 to 5 is 5 
1->6->5 
Distance from 1 to 6 is 1 
1->6
